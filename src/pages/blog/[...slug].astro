---
// import { type CollectionEntry, getCollection } from 'astro:content';
import BlogPost from '../../layouts/BlogPost.astro';
import type { InferGetStaticParamsType } from 'astro';
import { sanityClient } from 'sanity:client';
import { type Post } from '../../consts';
import PortableText from '../../components/PortableText.astro';

export async function getStaticPaths() {
	const posts : Post[] = await sanityClient.fetch(`
		*[_type == "post"] | order(publishedAt desc)
		{
			...,
			author->,
			categories[]->
		}
	`);
	posts.forEach(post => {
		post.pubDate = new Date(post.publishedAt);
		post.updatedDate = post._updatedAt ? new Date(post._updatedAt) : undefined;
	})
	return posts.map((post:Post) => ({
		params: { slug: post.slug.current },
		props: post
	}));


	// const posts = await getCollection('blog');
	// return posts.map((post) => ({
	// 	params: { slug: post.slug },
	// 	props: post,
	// }));
}

// type Props = CollectionEntry<'blog'>;
// const post = Astro.props;
// const { Content } = await post.render();
type Params = InferGetStaticParamsType<typeof getStaticPaths>;
const { slug } = Astro.params;
const post = Astro.props as Post;
---

<BlogPost {...post}>
	<PortableText value={post.body} />
</BlogPost>


<!-- <BlogPost {...post.data}>
	<h1>{post.data.title}</h1>
	<Content />
</BlogPost> -->
