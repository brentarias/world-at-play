---
import HeaderLink from './HeaderLink.astro';
import { SITE_TITLE } from '../consts';
// Astro discord discussion revealed that `type ImageMetadata` should never be
// used with remote images.  Instead use `ImageTransform`.
import { type ImageTransform } from 'astro';
import { getImage } from "astro:assets";

import { sanityClient } from 'sanity:client';

const pics = await sanityClient.fetch(`
		*[_type == "pic" && id.current == "hero_1"]{
      'meta': {
        'src': pic.asset->url,
        'height': pic.asset->metadata.dimensions.height,
        'width': pic.asset->metadata.dimensions.width,
        'format': pic.asset->extension
      }
    }
	`);

const pic = pics[0];

// All this effort, merely so that the backgroun
// image is downloaded locally, but without any
// transformation.
const backgroundMeta = { 
  // src: pic.imageUrl,
  ...pic.meta
} as ImageTransform;

// Astro's 'getImage' will "inline" the image.
const background = await getImage(backgroundMeta);
// Embedding the CSS 'url' function directly in the CSS variable
// is necessary, or this will not work.
const heroBanner = `url(${background.src})`;
---
<div class="menubar container">
  <nav>
    <ul>
      <li class="logo"><a href="/">{SITE_TITLE}</a></li>
    </ul>
    <input class="menu-btn" type="checkbox" id="menu-btn" />
    <label class="menu-icon" for="menu-btn">
      <span class="nav-icon" style="font-size: 1.6em">&#x2261;</span>
    </label>
    <ul class="menu">
      <HeaderLink href="/">Home</HeaderLink>
      <HeaderLink href="/philosophy">Philosophy</HeaderLink>
      <HeaderLink href="/about">About</HeaderLink>
    </ul>
  </nav>
</div>

<div class="menu-gap">
</div>

<header style={{ '--heroBanner': heroBanner }} >
	<!-- {SITE_TITLE} -->
	<!-- <h2>
	</h2> -->
</header>

<style>

  [data-icon] {
    font-size: 2em;
  }

  [data-icon]:hover {
    /* 
    This selector is part of astro-icon documentation: 
    https://www.astroicon.dev/guides/styling/ 
    In part this approach is needed, because astro-icon seems
    to strip out or otherwise manipulate the svg tag attributes.
    Also, normal SVG manipulation presumes the 'fill' directive
    for color, but astro-icon instead uses 'color'.  
    */
    color: goldenrod;
    transition: color 0.4s ease;
  }

	body>header {
		/* usefule when "position: fixed" is turned-on */
		padding-top: 80px;
		padding-bottom: 180px;
		background-size: cover;
		background-position: center;
		background-image: var(--heroBanner);
	}

	div.menu-gap {
		padding-top: 80px;
	}

  .menubar {
		background-color: var(--background-color);
    /* with a non-inline position configured, the sense
       of width is lost, and thus must be specified explicity.
       Do this either with the a width property, or pairing
       with the pico CSS `container` class */
		position: fixed;
		z-index: 5;

		overflow: hidden;
  }

	nav {
		align-items: center;
	}

	nav :is(.menu-btn, .menu-icon) {
		display: none;
		cursor: pointer;
		user-select: none;
	}


@media (width < 48em) {
	nav {
		flex-wrap: wrap;
		& .menu-icon {
			display:block;
		}
		& .menu-btn:checked ~ .menu {
			max-height: 100vh;
		}

		& >ul.menu {
			flex-direction: column;
			align-items:flex-start;
			width: 100%;
			max-height: 0;
			transition: max-height 0.3s ease-out;
			box-shadow: 0px 3px 8px;
			margin: 10px 10px;
			& :global(li) {
				width: 100%;
			}
			& :global(a) {
				display: block;
			}
			& :global(a:hover) {
				background-color: var(--secondary-hover);
			}
		}
	}
}


</style>
